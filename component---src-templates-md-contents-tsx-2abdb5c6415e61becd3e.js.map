{"version":3,"file":"component---src-templates-md-contents-tsx-2abdb5c6415e61becd3e.js","mappings":"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","sources":["webpack://blog/./src/sidebar/SidebarContainer.tsx","webpack://blog/./src/sidebar/SidebarItemContainer.tsx","webpack://blog/./src/sidebar/SidebarItemMenu.tsx","webpack://blog/./src/sidebar/SidebarItem.tsx","webpack://blog/./src/sidebar/ContemtView.tsx","webpack://blog/./src/templates/MdContents.tsx"],"sourcesContent":["import React, { useState } from 'react'\r\n\r\ntype Props = {\r\n    children:JSX.Element\r\n}\r\n\r\nexport default function SidebarContainer({children}:Props):React.ReactElement{\r\n\r\n    const [collapsed, setCollapsed] = useState(true)\r\n\r\n    const collapse = () => {\r\n        setCollapsed(!collapsed)\r\n    }\r\n\r\n    return (\r\n        <nav id=\"sidebar\" className={collapsed ? '':'active'}>\r\n            <div className=\"custom-menu\">\r\n                <button type=\"button\" id=\"sidebarCollapse\" className=\"btn btn-primary\" onClick={collapse}>\r\n                    <i className=\"fa fa-bars\"></i>\r\n                    <span className=\"sr-only\">Toggle Menu</span>\r\n                </button>\r\n            </div>\r\n            {children}\r\n        </nav>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\ntype Props = {\r\n    name:string\r\n    children: Array<JSX.Element>\r\n}\r\n\r\nexport default function SidebarItemContainer({ name, children }: Props): React.ReactElement {\r\n    return (\r\n        <div className=\"p-4 pt-5\">\r\n            <h1><a href=\"/\" className=\"logo\">{name}</a></h1>\r\n            <ul className=\"list-unstyled components mb-5\">\r\n                {children}\r\n            </ul>\r\n\r\n            {/* <div className=\"mb-5\">\r\n                <h3 className=\"h6\">Subscribe for newsletter</h3>\r\n                <form action=\"#\" className=\"colorlib-subscribe-form\">\r\n                    <div className=\"form-group d-flex\">\r\n                        <div className=\"icon\"><span className=\"icon-paper-plane\"></span></div>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter Email Address\" />\r\n                    </div>\r\n                </form>\r\n            </div> */}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react'\r\n\r\ntype Props = {\r\n    id: string,\r\n    title: string,\r\n    children: Array<JSX.Element>\r\n}\r\n\r\nexport default function SidebarItemMenu({ id, title, children }: Props): React.ReactElement {\r\n    const [collapsed, setCollapsed] = useState(true)\r\n\r\n    const collapse = () => {\r\n        setCollapsed(!collapsed)\r\n    }\r\n\r\n    return (\r\n        <li className=\"active\">\r\n            <a data-toggle=\"collapse\" aria-expanded={!collapsed} onClick={collapse}\r\n                className={collapsed ? \"dropdown-toggle\" : \"dropdown-toggle collapsed\"}>{title}</a>\r\n            <ul className={collapsed ? \"collapse list-unstyled\" : \"collapse list-unstyled show\"} id={id}>\r\n                {children}\r\n            </ul>\r\n        </li>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\ntype Props = {\r\n    title: string\r\n    href: string\r\n}\r\n\r\nexport default function SidebarItem({title, href}: Props): React.ReactElement {\r\n\r\n\r\n    return (\r\n        <li>\r\n            <a href={href}>{title}</a>\r\n        </li>\r\n    )\r\n}\r\n","import React, { ReactElement } from \"react\";\r\n\r\ntype Props = {\r\n    title: string,\r\n    date: string,\r\n    categories: Array<string>\r\n    html: string\r\n}\r\n\r\nexport default function ContentsView({ title, date, html }: Props): ReactElement {\r\n    return (\r\n        <div id=\"content\" className=\"p-4 p-md-5 pt-5\">\r\n            <h1>{title}</h1>\r\n            {date}\r\n            {/* <div dangerouslySetInnerHTML={{ __html: html }}></div> */}\r\n        </div>\r\n    )\r\n}","import * as React from \"react\"\r\nimport type { HeadFC, PageProps } from \"gatsby\"\r\nimport { graphql } from 'gatsby'\r\n\r\nimport '../styles.css';\r\n\r\nimport SidebarContainer from \"../sidebar/SidebarContainer\";\r\nimport SidebarItemContainer from \"../sidebar/SidebarItemContainer\";\r\nimport SidebarItemMenu from \"../sidebar/SidebarItemMenu\";\r\nimport SidebarItem from \"../sidebar/SidebarItem\";\r\nimport ContentsView from \"../sidebar/ContemtView\";\r\n\r\ntype QueryProps = {\r\n    markdownRemark: {\r\n        html: string,\r\n        frontmatter: {\r\n            title: string,\r\n            date: string,\r\n            categories: Array<string>,\r\n            summary: string,\r\n            // thumbnail: string,\r\n            path: string\r\n        }\r\n    },\r\n    allMarkdownRemark: {\r\n        nodes: {\r\n            id: string,\r\n            frontmatter: {\r\n                title: string,\r\n                date: string,\r\n                menu: string,\r\n                path: string,\r\n            }\r\n        }[]\r\n    }\r\n};\r\n\r\nconst IndexPage = ({ data }: PageProps<QueryProps>) => {\r\n    const node = data.markdownRemark\r\n\r\n    // create sidebar components\r\n    const createSidebarItems = ():Array<React.ReactElement> => {\r\n        let components = Array<React.ReactElement>();\r\n        let dirs = new Map<string, any[]>();\r\n        // create \r\n        data.allMarkdownRemark.nodes.map(node => {\r\n            let file = {\r\n                id: node.id,\r\n                title: node.frontmatter.title,\r\n                changeTime: node.frontmatter.date,\r\n                dir: node.frontmatter.menu,\r\n                path: node.frontmatter.path\r\n            }\r\n            if (!dirs.hasOwnProperty(file.dir))\r\n                dirs.set(file.dir, [])\r\n            dirs.get(file.dir)?.push(file);\r\n        })\r\n        // create components\r\n        dirs.forEach((files, key, obj) => {\r\n            let children = Array<React.ReactElement>();\r\n            files.forEach((file, index, arr) => {\r\n                children.push(<SidebarItem title={file.title} href={file.path} key={file.id}/>)\r\n            })\r\n            if (key === '') components = children.concat(components)\r\n            else components.push(<SidebarItemMenu id={key} title={key} children={children} key={key}/>)\r\n        })\r\n        return components;\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"wrapper d-flex align-items-stretch\">\r\n                <SidebarContainer>\r\n                    <SidebarItemContainer name=\"yeti's blog\">\r\n                        {createSidebarItems()}\r\n                    </SidebarItemContainer>\r\n                </SidebarContainer>\r\n                <ContentsView html={node.html} title={node.frontmatter.title} date={node.frontmatter.date} categories={node.frontmatter.categories} />\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport const Head: HeadFC = () => <title>Home Page</title>\r\n\r\nexport default IndexPage\r\n\r\n\r\nexport const query = graphql`\r\nquery($id: String!) {\r\n    markdownRemark(id:{ eq: $id }) {\r\n            html\r\n            frontmatter {\r\n                title\r\n                date\r\n                categories\r\n                summary\r\n            }\r\n    }\r\n    allMarkdownRemark {\r\n        nodes {\r\n            id\r\n            frontmatter {\r\n                title\r\n                date\r\n                menu\r\n                path\r\n            }\r\n        }\r\n    }\r\n}\r\n`;"],"names":["SidebarContainer","children","collapsed","setCollapsed","useState","React","id","className","type","onClick","SidebarItemContainer","name","href","SidebarItemMenu","title","SidebarItem","ContentsView","date","html","Head","_ref","data","node","markdownRemark","components","Array","dirs","Map","allMarkdownRemark","nodes","map","file","frontmatter","changeTime","dir","menu","path","hasOwnProperty","set","get","_dirs$get","push","forEach","files","key","obj","index","arr","concat","createSidebarItems","categories"],"sourceRoot":""}