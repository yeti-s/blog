{"componentChunkName":"component---src-templates-md-contents-tsx","path":"/yeti_blog/01_dev_diary/","result":{"data":{"markdownRemark":{"html":"<h2><strong>프레임워크 선정</strong></h2>\n<p>추후에 three.js를 이용하여 point cloud 데이터를 visualization 하는 기능을 추가하기 위해 기존에 익숙하였던 React 프레임워크로 개발을 진행하려 하였다. 그러다 정적 사이트 생성이 가능하고 React를 기반으로 하는 <a href=\"https://www.gatsbyjs.com/\" target=\"_blank\" rel=\"nofollow\">Gatsby</a> 라는 프레임워크를 알게 되었다. 이를 github pages와 함께 활용하면 markdown 파일 작성만으로 페이지를 쉽게 생성할 수 있을 것이다.</p>\n<p>튜토리얼을 따라하며 기본적인 사용 방법을 익혔다. Gatsby는 기본적으로 src/pages에 있는 React 파일을 pages로 생성한다.</p>\n<p><img src=\"/5411da04d1ef20afea8fe2d4e0f46511/01_gatsby_pages.png\" alt=\"gatsby pages\" title=\"gatsby pages\"></p>\n<p>위 사진처럼 작성할 시 404와 index 페이지가 생성된다.</p>\n<p>Gatsby에서는 query를 통해 데이터를 가져올 수 있다. 아래와 같이 query를 요청하고 props로 받아올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token comment\">// 요청한 query에 대해 props로 받는다</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IndexPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PageProps<span class=\"token operator\">&lt;</span>QueryProps<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>markdownRemark<span class=\"token punctuation\">.</span>html\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql\r\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{\r\n        markdownRemark() {\r\n            html\r\n            frontmatter {\r\n                title\r\n                date\r\n                categories\r\n                summary\r\n            }\r\n        }\r\n    }</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>개발 단계에서 query에 대한 테스트는 <a href=\"http://localhost:8000/___graphql\" target=\"_blank\" rel=\"nofollow\">localhost:8000/___graphql</a> 에서 할 수 있다.</p>\n<p><img src=\"/12a696d67b017c4e888797b0b0d5da56/01_graphql.png\" alt=\"graphql\" title=\"graphql\"></p>\n<p>테스트로 gh-pages로 deploy를 진행하였더니 404 에러가 발생하였다. 원인을 찾은 결과 local에서는 <a href=\"https://localhost:8000\" target=\"_blank\" rel=\"nofollow\">https://localhost:8000</a> 으로 접속하였으나, gh-pages 이용해 배포한 환경은 <a href=\"https://yeti-s.github.io/blog\" target=\"_blank\" rel=\"nofollow\">https://yeti-s.github.io/blog</a>로 항상 repository name이 붙어있다. 따라서 gatsby-config으로 path prefix 설정을 해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// gatsby-config.ts</span>\r\n<span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> GatsbyConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n    pathPrefix<span class=\"token operator\">:</span> <span class=\"token string\">\"/blog\"</span>\r\n    <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// package.json</span>\r\n<span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token operator\">...</span>\r\n    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby build --prefix-paths\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string-property property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby serve --prefix-paths\"</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>build와 serve에 각각 설정해준 –prefix-paths 옵션을 함께 추가하고 배포를 진행하여 문제를 해결할 수 있었다. </p>\n<p>사실 gatsby-config에 siteMetadata라는 옵션을 함께 설정해주었으나, 설정 값이 pathPrefix와 충돌이 있는 것인지 webpack.js 요청을 실패하는 경우가 발생하여 siteMetadata 옵션을 제거하였다.</p>\n<h2><strong>템플릿</strong></h2>\n<p>Gatsby에서는 다양한 <a href=\"https://www.gatsbyjs.com/starters/\" target=\"_blank\" rel=\"nofollow\">템플릿</a>을 제공하였다. 템플릿을 이용해 프로젝트를 생성할 수 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">$ gatsby <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span>프로젝트명<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>템플릿 주소<span class=\"token punctuation\">]</span></code></pre></div>\n<p>그러나 템플릿의 대부분이 node v16 까지만 지원하는 것이 많았다. 블로그에 알맞는 템플릿을 찾던 중, node v18을 지원하는 <a href=\"https://github.com/jpedroschmitz/rocketdocs\" target=\"_blank\" rel=\"nofollow\">rocketdocs</a>라는 템플릿을 발견하였다. 기존 목적인 markdown 파일 작성만으로 페이지 생성을 쉽게 할 수 있고 docs 형식으로 프로젝트 진행 중 학습한 내용, 진행 과정 등을 남기기 좋을 것 같아 채택해보았다. 하지만 customize하기 어렵다는 문제가 있었다. 대부분의 템플릿에 해당하는 문제였기에 템플릿을 포기하고 직접 구현하기로 하였다.</p>\n<h2><strong>페이지 생성</strong></h2>\n<p>Gatsby는 src/pages에 tsx파일을 page로 생성한다고 하였다. 그럼 .md 파일을 작성할 때 마다 tsx파일을 생성해야 하는가? 다행이도 Gatsby에는 프로그램적으로 페이지를 생성하는 방법이 있다.</p>\n<p><a href=\"https://www.gatsbyjs.com/docs/tutorial/getting-started/part-6/\" target=\"_blank\" rel=\"nofollow\">Part 6: Create Pages Programmatically</a></p>\n<ol>\n<li>\n<p>gatsby-transformer-remark 플러그인을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i gatsby-transformer-remark</code></pre></div>\n</li>\n<li>\n<p>gatsby-config에서 gatsby-transformer-remark 플러그인을 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token comment\">// gatsby-config.ts</span>\r\n <span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> GatsbyConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n     <span class=\"token operator\">...</span>\r\n     resolve<span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby-transformer-remark\"</span><span class=\"token punctuation\">,</span>\r\n     option<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\r\n         <span class=\"token operator\">...</span> <span class=\"token comment\">// gatsby-transformer-remark 관련 플러그인</span>\r\n     <span class=\"token punctuation\">}</span>\r\n <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>template 파일을 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 생성할 페이지의 react element</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IndexPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> PageProps<span class=\"token operator\">&lt;</span>QueryProps<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> node <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>markdownRemark\r\n    <span class=\"token operator\">...</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// id는 gatsby-node.ts에서 받아옴 아래 보면 알게됨</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql\r\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">query($id: String!) {\r\n    markdownRemark(id:{ eq: $id }) {\r\n            html\r\n            frontmatter {\r\n                title\r\n                date\r\n                categories\r\n                summary\r\n            }\r\n    }\r\n}</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>frontmatter의 객체는 .md 파일에서 아래 key 값들에 해당한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\r\ntitle: 'Gatsby and React'\r\ndate: '2023-05-15'\r\ncategories: ['blog', 'gatsby', 'dev']\r\nsummary: 'Blog 1일차 개발 일지.'\r\nthumbnail: '../assets/icon.png'\r\nmenu: 'blog'\r\npath: '/yeti_blog/intro'\r\n---</code></pre></div>\n</li>\n<li>\n<p>root dir에 gatsby-node.ts 파일을 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GatsbyNode<span class=\"token punctuation\">,</span> graphql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"gatsby\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>resolve<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span>\r\n\r\n<span class=\"token keyword\">const</span> createPages<span class=\"token operator\">:</span> GatsbyNode<span class=\"token punctuation\">[</span><span class=\"token string\">\"createPages\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>graphql<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>createPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// markdown 파일에 대해 query 요청</span>\r\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token generic-function\"><span class=\"token function\">graphql</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\r\n    {\r\n        allMarkdownRemark {\r\n            edges {\r\n                node {\r\n                    id\r\n                    frontmatter {\r\n                        path\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nresult<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// page의 path가 되는 부분</span>\r\n            path<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span> \r\n            <span class=\"token comment\">// 생성할 page의 template</span>\r\n            component<span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/templates/MdContents.tsx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token comment\">// 템플릿에 전달할 내용들</span>\r\n            context<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\r\n                id<span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>id\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n        \r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>createPages<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>위 방법으로 contents 폴더에 있는 .md 파일을 읽고 페이지로 생성한다.</p>","frontmatter":{"title":"Framework Gatsby","date":"2023-05-15","categories":["blog","gatsby","dev"],"summary":"Blog 1일차 개발 일지."}},"allMarkdownRemark":{"nodes":[{"id":"878e7591-da58-5305-a42e-759a7c17749b","frontmatter":{"title":"Yeti의 블로그","date":"2023-05-14","menu":"","path":"/intro"}},{"id":"5983cbf4-4d43-51bc-9a82-6b4c0b72bee0","frontmatter":{"title":"프로젝트 소개","date":"2023-05-14","menu":"blog","path":"/yeti_blog/intro"}},{"id":"433ef403-65eb-5bdb-b32e-5f1a004678a3","frontmatter":{"title":"Framework Gatsby","date":"2023-05-15","menu":"blog","path":"/yeti_blog/01_dev_diary"}}]}},"pageContext":{"id":"433ef403-65eb-5bdb-b32e-5f1a004678a3"}},"staticQueryHashes":[],"slicesMap":{}}